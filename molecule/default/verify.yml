---
- name: Verify
  hosts: all
  vars:
    database_password: "1234"
  vars_files:
    - ../../defaults/main.yml
  tasks:
    - name: Check MariaDB socket exists
      ansible.builtin.wait_for:
        path: "{{ '/run/mysqld/mysqld.sock' if ansible_os_family == 'Debian' else '/var/lib/mysql/mysql.sock' }}"
        delay: 1
        timeout: 10

    - name: Check MariaDB port listening
      ansible.builtin.wait_for:
        port: 3306
        timeout: 10

    - name: Check current user
      community.mysql.mysql_query:
        login_host: localhost
        login_user: opencast
        login_password: "{{ database_password }}"
        query: >-
          SELECT CURRENT_USER() as USER;
      register: query_current_user

    - name: Fail on invalid user
      ansible.builtin.fail:
        msg: User should be "opencast@%" but is {{ query_current_user.query_result.0.0.USER }}
      when: "'opencast@%' != query_current_user.query_result.0.0.USER"

    - name: Check Opencast table exists
      community.mysql.mysql_query:
        login_host: localhost
        login_user: opencast
        login_password: "{{ database_password }}"
        query: >-
          SHOW DATABASES LIKE "opencast";
      register: query_databases

    - name: Fail on missing opencast database
      ansible.builtin.fail:
        msg: Opencast database does not exist
      when: "query_databases.rowcount.0 != 1"

    # ───────────────────────────────────────────────────────────
    # Backup configuration (only when enabled)
    # ───────────────────────────────────────────────────────────

    - name: Verify backup configuration when enabled
      when: database_backup_enabled | default(false)
      block:
        - name: Assert backups are enabled
          ansible.builtin.assert:
            that:
              - database_backup_enabled | default(false)
            fail_msg: "Backups are disabled; skipping backup verification."

        - name: Ensure backup directory exists
          ansible.builtin.stat:
            path: "{{ database_backup_output_path }}"
          register: backup_dir_stat

        - name: Assert backup directory is present and writable
          ansible.builtin.assert:
            that:
              - backup_dir_stat.stat.exists
              - backup_dir_stat.stat.isdir
            fail_msg: >
              Backup directory {{ database_backup_output_path }}
              is missing or not a directory.
        - name: Check database-backup.service is installed and enabled
          ansible.builtin.systemd:
            name: database-backup.service
            enabled: true
            state: started

        - name: Check database-backup.timer is installed and enabled
          ansible.builtin.systemd:
            name: database-backup.timer
            enabled: true
            state: started

        - name: Slurp timer unit file for inspection
          ansible.builtin.slurp:
            path: /etc/systemd/system/database-backup.timer
          register: timer_unit

        - name: Assert OnCalendar line in timer unit matches schedule
          ansible.builtin.assert:
            that:
              - "'OnCalendar={{ database_backup_schedule }}' in (timer_unit.content | b64decode)"
            fail_msg: >
              database-backup.timer does not contain
              OnCalendar={{ database_backup_schedule }}.
            success_msg: >
              Timer unit file correctly contains
              OnCalendar={{ database_backup_schedule }}.
